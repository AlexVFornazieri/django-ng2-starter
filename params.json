{
  "name": "Django-ng2-starter",
  "tagline": "Starter kit featuring Django and Angular 2",
  "body": "\r\nDjango is awesome. Angular2 is also awesome. But they both are awesome when there is abrupt seperation between them.\r\n\r\nHowever need may arise to combine both django and angular2 to make your project double awesome.\r\n\r\nI have come across a situation where I need to use both side-by-side utilizing the features of both.\r\nTo make it more complicated, angular application should be in the root url. It would have been bit easier if angular app is served from sub folder like domain.com/app/. Anyways, I wanted to find the solution (again, under critical deadline). \r\n\r\n\r\n#Project Setup\r\n```\r\nvirtualenv /path/to/env/\r\n\r\ncd /path/to/env/\r\n\r\nsource bin/activate\r\n\r\npip install django\r\n\r\ndjango-admin startproject project_name\r\n\r\ncd project_name/\r\n\r\npython manage.py startapp app_name\r\n\r\npython manage.py migrate\r\n\r\nmkdir ngApp\r\n\r\ncd ngApp\r\n\r\ngit clone https://github.com/angular/quickstart .\r\n\r\nrm -rf .git/ .github/\r\n\r\nmv index.html /path/to/django/app/templates/index.html\r\n\r\nmv styles.css /path/to/django/app/static/css/styles.css\r\n\r\nnpm install\r\n```\r\n\r\nNow that we have succesfully setup our project directory.\r\n\r\nIn settings.py file\r\n```\r\nANGULAR_URL = '/ng/'\r\nANGULAR_ROOT = os.path.join(BASE_DIR, 'ngApp/')\r\n```\r\nThe above lines do same as static url and static root. Render static files in the angular2.\r\n```\r\nvar config = {\r\nmap: map,\r\nbaseURL: '/ng/',\r\npackages: packages\r\n};\r\n```\r\nNote that `baseURL: '/ng/' in the ANGULAR_URL\r\n```\r\nclass AngularApp(TemplateView):\r\n  template_name = 'index.html'\r\n\r\n  def get_context_data(self, **kwargs):\r\n  context = super(AngularApp, self).get_context_data(**kwargs)\r\n  context['ANGULAR_URL'] = settings.ANGULAR_URL\r\n  return context\r\n\r\nclass SampleView(View):\r\n\t\"\"\"View to render django template to angular\"\"\"\r\n\tdef get(self, request):\r\n\treturn render(\"OK!\")\r\n```\r\nNote that we are passing ANGULAR_URL as the context. \r\n\r\nAdd the below in urls.py\r\n```\r\nngurls = [\r\n  url(r'^$', SampleView.as_view(), name='sample'),\r\n]\r\n\r\nurlpatterns = [\r\n  url(r'^admin/', admin.site.urls),\r\n  url(r'^(?!ng/).*$', AngularApp.as_view(), name=\"angular_app\"),\r\n] + static(settings.ANGULAR_URL, document_root=settings.ANGULAR_ROOT)\r\n```\r\nHere `(?!ng/)` is the ANGULAR_URL\r\n\r\nRemember since you need the angular app in the root URL, you need to accept all the routing except static files in the ngApp. `url(r'^(?!ng/).*$'` does the same. It accepts all the paths except domain.com/ng/.\r\nThis leaves you another challenge. If you route to domain.com/someurl/ , the above django route will show you to index.html, where you will have angular application. So, you have to handle 404 pages in angular application also. \r\n\r\nHere comes the important part. We are using the django template to call the angular application. This is the place where you can make double awesome. You can add django logics here.  \r\nNow create index.html in templates folder under django app.\r\n```\r\n{% load static %}\r\n\r\n<html>\r\n  <head>\r\n    <title>Angular 2 QuickStart</title>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\r\n    <base href=\"/\">\r\n    <!-- Polyfill(s) for older browsers -->\r\n    <script src=\"{{ ANGULAR_URL }}node_modules/core-js/client/shim.min.js\"></script>\r\n\r\n    <script src=\"{{ ANGULAR_URL }}node_modules/zone.js/dist/zone.js\"></script>\r\n    <script src=\"{{ ANGULAR_URL }}node_modules/reflect-metadata/Reflect.js\"></script>\r\n    <script src=\"{{ ANGULAR_URL }}node_modules/systemjs/dist/system.src.js\"></script>\r\n\r\n    <script src=\"{{ ANGULAR_URL }}systemjs.config.js\"></script>\r\n    {# -------------------------------------- #}\r\n    {# Write your django logics anywhere here #}\r\n    {# -------------------------------------- #}\r\n    <script>\r\n      window.STATIC_URL = \"{{ ANGULAR_URL }}\";\r\n      System.import('/ng/app/main').catch(function(err){\r\n          console.error(err);\r\n      });\r\n    </script>\r\n  </head>\r\n\r\n  <body>\r\n    <my-app>Loading...</my-app>\r\n  </body>\r\n</html>\r\n```\r\nIn `System.import` you should specify `/ANGULAR_URL/angular_app_folder/name_of_main`\r\n\r\nFor example, if you have two angular applications based on user roles, you can set a condition here and route them accordingly by changing in `System.import`. Or you can display the name and profile picture current user in the template or something similar to stackoverfow reputation of current user but remember you  can handle it in angular also. One thing you should keep in mind is that if you are using the above model, keep login and registration as a pure django template.\r\n\r\nNow create the below files.\r\n\r\nmain.ts\r\n```\r\nimport { bootstrap }    from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport {appRouterProviders} from \"./app.route\";\r\nimport {HTTP_PROVIDERS} from \"@angular/http\";\r\nimport {enableProdMode} from '@angular/core';\r\n\r\nenableProdMode();\r\nbootstrap(AppComponent, [\r\n  appRouterProviders,\r\n  HTTP_PROVIDERS\r\n])\r\n.catch(err => console.error(err));\r\n```\r\n\r\n`mkdir app`\r\n\r\n`cd app`\r\n\r\nLets add two more components to implement routing.\r\n\r\napp.route.ts\r\n\r\n```\r\nimport { provideRouter, RouterConfig } from '@angular/router';\r\nimport {Component1Component} from \"./component1.component\";\r\nimport {Component2Component} from \"./component2.component\";\r\n\r\nconst routes: RouterConfig = [\r\n\t{ path: '',redirectTo: '/component1',pathMatch: 'full'},\r\n  { path: 'component1', component: Component1Component },\r\n  { path: 'component2', component: Component2Component },\r\n];\r\n\r\nexport const appRouterProviders = [\r\n  provideRouter(routes)\r\n];\r\n```\r\napp.component.ts\r\n\r\n```\r\nimport { Component } from '@angular/core';\r\nimport { ROUTER_DIRECTIVES } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n        <h1>My First Angular 2 App</h1>\r\n        <nav>\r\n          <a routerLink=\"/component1\" routerLinkActive=\"active\">Component 1</a>\r\n          <a routerLink=\"/component2\" routerLinkActive=\"active\">Component 2</a>\r\n        </nav>\r\n        <router-outlet></router-outlet>\r\n    `,\r\n    directives: [ROUTER_DIRECTIVES]\r\n})\r\nexport class AppComponent { }\r\n```\r\n\r\ncomponent1.component.ts\r\n\r\n```\r\nimport {Component} from \"@angular/core\";\r\n@Component({\r\n  template: '<h1>Component 1</h1>'\r\n})\r\nexport class Component1Component{\r\n\r\n}\r\n\r\ncomponent2.component.ts\r\n\r\nimport {Component} from \"@angular/core\";\r\n@Component({\r\n  template: '<h1>Component 2</h1>'\r\n})\r\nexport class Component2Component{\r\n\r\n}\r\n```\r\n\r\nNow your folder structure should look something like this. I have included all the files in the tree below.\r\n\r\n<pre>\r\n.\r\n├── core\r\n│   ├── admin.py\r\n│   ├── apps.py\r\n│   ├── __init__.py\r\n│   ├── migrations\r\n│   │   ├── __init__.py\r\n│   ├── models.py\r\n│   ├── static\r\n│   │   └── css\r\n│   │       └── styles.css\r\n│   ├── templates\r\n│   │   └── index.html\r\n│   ├── tests.py\r\n│   ├── views.py\r\n├── project\r\n│   ├── __init__.py\r\n│   ├── settings.py\r\n│   ├── urls.py\r\n│   ├── wsgi.py\r\n├── db.sqlite3\r\n├── LICENSE\r\n├── manage.py\r\n├── ngApp\r\n│   ├── app\r\n│   │   ├── app.component.spec.ts\r\n│   │   ├── app.component.ts\r\n│   │   ├── app.route.ts\r\n│   │   ├── component1.component.ts\r\n│   │   ├── component2.component.ts\r\n│   │   └── main.ts\r\n│   ├── CHANGELOG.md\r\n│   ├── Dockerfile\r\n│   ├── e2e\r\n│   ├── node_modules\r\n│   │   ├\r\n│   ├── README.md\r\n│   ├── typings\r\n│   │   ├── \r\n└── README.md</pre>\r\n\r\n```\r\ncd /path/to/ngApp/\r\n\r\nnpm start \r\n```\r\n\r\nOpen a new terminal,\r\n\r\n```\r\ncd path/to/django-ng2-starter/\r\n\r\npython manage.py runserver\r\n\r\n```\r\n\r\n### Happy Coding :)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}